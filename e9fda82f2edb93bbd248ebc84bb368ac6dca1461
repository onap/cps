{
  "comments": [
    {
      "key": {
        "uuid": "9d7d8922_eb994ac9",
        "filename": "cps-ri/src/main/java/org/onap/cps/spi/impl/CpsDataPersistenceServiceImpl.java",
        "patchSetId": 1
      },
      "lineNbr": 450,
      "author": {
        "id": 6639
      },
      "writtenOn": "2023-01-09T17:24:16Z",
      "side": 1,
      "message": "suggestion: rename to updateLeaves",
      "range": {
        "startLine": 450,
        "startChar": 65,
        "endLine": 450,
        "endChar": 71
      },
      "revId": "e9fda82f2edb93bbd248ebc84bb368ac6dca1461",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d6ab051_ff82646e",
        "filename": "cps-ri/src/main/java/org/onap/cps/spi/impl/CpsDataPersistenceServiceImpl.java",
        "patchSetId": 1
      },
      "lineNbr": 453,
      "author": {
        "id": 6639
      },
      "writtenOn": "2023-01-09T17:24:16Z",
      "side": 1,
      "message": "naming is always a bit tricky when merging data \n(there is also an inconsistency re the words \u0027leaves\u0027/\u0027attributes\u0027, \u0027leaves\u0027 is beter I think)\n\nsomaybe something like \n\n1) currentLeaves \u003d ....\n2) udpateLeaves \u003d merge(currentAttributes, updatedLeaves)    (mereg can be a new private method that creates and returns the \u0027merged\u0027 map)",
      "range": {
        "startLine": 453,
        "startChar": 40,
        "endLine": 453,
        "endChar": 54
      },
      "revId": "e9fda82f2edb93bbd248ebc84bb368ac6dca1461",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c22a6df_f269b871",
        "filename": "cps-ri/src/main/java/org/onap/cps/spi/impl/CpsDataPersistenceServiceImpl.java",
        "patchSetId": 1
      },
      "lineNbr": 456,
      "author": {
        "id": 6639
      },
      "writtenOn": "2023-01-09T17:24:16Z",
      "side": 1,
      "message": "why do this check exactly?",
      "range": {
        "startLine": 456,
        "startChar": 12,
        "endLine": 456,
        "endChar": 38
      },
      "revId": "e9fda82f2edb93bbd248ebc84bb368ac6dca1461",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bfa28efb_3fa75050",
        "filename": "cps-ri/src/test/groovy/org/onap/cps/spi/impl/CpsDataPersistenceServiceSpec.groovy",
        "patchSetId": 1
      },
      "lineNbr": 179,
      "author": {
        "id": 6639
      },
      "writtenOn": "2023-01-09T17:24:16Z",
      "side": 1,
      "message": "use the term \u0027merge\u0027 here ?",
      "range": {
        "startLine": 179,
        "startChar": 125,
        "endLine": 179,
        "endChar": 133
      },
      "revId": "e9fda82f2edb93bbd248ebc84bb368ac6dca1461",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a405d4de_01c36d95",
        "filename": "cps-ri/src/test/groovy/org/onap/cps/spi/impl/CpsDataPersistenceServiceSpec.groovy",
        "patchSetId": 1
      },
      "lineNbr": 182,
      "author": {
        "id": 6639
      },
      "writtenOn": "2023-01-09T17:24:16Z",
      "side": 1,
      "message": "note sure if calling the method with NO new value makes sense,  ie. I would not code for it (but would test! as you have here) the expatiation is that the code merges the existing with nothing and class save, inefficient but safest way...\nSame for an update with same value...",
      "range": {
        "startLine": 182,
        "startChar": 103,
        "endLine": 182,
        "endChar": 105
      },
      "revId": "e9fda82f2edb93bbd248ebc84bb368ac6dca1461",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "69b49200_21404f1e",
        "filename": "cps-ri/src/test/groovy/org/onap/cps/spi/impl/CpsDataPersistenceServiceSpec.groovy",
        "patchSetId": 1
      },
      "lineNbr": 183,
      "author": {
        "id": 6639
      },
      "writtenOn": "2023-01-09T17:24:16Z",
      "side": 1,
      "message": "very good, that more or less what I hoped to see but maybe we need to be clearer on (updating) old and new values too\n\nin short from (nor proper json but I think you get the idea) Also you scenarios can be describe simpler I think\n\nscenario               | exist         |  updated        || result\nadd new leaf           | exists:value1 |  new:value2     || exist:value1, new:value2 \nupdate existing leaf   | exists:value1 |  exists:value2  || exist:value2\nadd first leaf         | new:value2    |                 || new:value2 \nupdate with same value | exists:value1 |  exists:value1  || exist:value1\nudpate with nothing    | exists:value1 |                 || exist:value1\n\n\n(sorry table format works in edit but gets lost when I save the comment, as it uses different font :-( )",
      "range": {
        "startLine": 180,
        "startChar": 0,
        "endLine": 183,
        "endChar": 127
      },
      "revId": "e9fda82f2edb93bbd248ebc84bb368ac6dca1461",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    }
  ]
}