/*
 *  ============LICENSE_START=======================================================
 *  Copyright (C) 2022 Nordix Foundation
 *  ================================================================================
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  SPDX-License-Identifier: Apache-2.0
 *  ============LICENSE_END=========================================================
 */

package org.onap.cps.ncmp.api.impl.async

import org.mapstruct.factory.Mappers
import org.onap.cps.ncmp.event.model.DmiAsyncRequestResponseEvent
import org.onap.cps.ncmp.event.model.EventContent
import org.onap.cps.ncmp.event.model.NcmpAsyncRequestResponseEvent
import org.onap.cps.ncmp.event.model.ResponseData
import spock.lang.Specification

class NcmpAsyncRequestResponseEventMapperSpec extends Specification {

    def objectUnderTest = Mappers.getMapper(NcmpAsyncRequestResponseEventMapper.class)

    def 'Convert dmi async request response event to ncmp async request response event'() {
        given: 'a dmi async request response event'
            def dmiAsyncRequestResponseEvent = new DmiAsyncRequestResponseEvent()
                    .withEventId('').withEventCorrelationId('8dbfe0a7-3b28-4109-8fcb-9fbc9c37d56a')
                    .withEventTime('').withEventContent(new EventContent().withResponseCode('200')
                    .withResponseData(new ResponseData().withAdditionalProperty('prop', 'value')))
        when: 'mapper is called'
            def result = objectUnderTest.toNcmpAsyncEvent(dmiAsyncRequestResponseEvent)
        then: 'result is of the correct type'
            assert result.class == NcmpAsyncRequestResponseEvent.class
        and: 'eventId and eventTime should be generated by custom method that'
            assert result.eventId != ''
            assert result.eventTime != ''
        and: 'target eventCorrelationId of mapped object should be same as source eventCorrelationId'
            assert result.eventCorrelationId == '8dbfe0a7-3b28-4109-8fcb-9fbc9c37d56a'
        and: 'after mapping additional properties should be stored'
            assert result: 'additionalProperties:prop' == 'value'
    }
}
