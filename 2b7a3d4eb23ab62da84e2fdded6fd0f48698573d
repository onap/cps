{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4f82b88c_8b6e7a00",
        "filename": "cps-ncmp-service/src/main/java/org/onap/cps/ncmp/api/impl/events/cmsubscription/CmNotificationSubscriptionNcmpOutEventProducer.java",
        "patchSetId": 13
      },
      "lineNbr": 61,
      "author": {
        "id": 6742
      },
      "writtenOn": "2024-03-27T15:42:42Z",
      "side": 1,
      "message": "What will happen if the server shuts down while these scheduled tasks are pending?\nWill CmNotificationSubscriptionNcmpOutEventPublishingTask recreate them?",
      "range": {
        "startLine": 61,
        "startChar": 4,
        "endLine": 61,
        "endChar": 117
      },
      "revId": "2b7a3d4eb23ab62da84e2fdded6fd0f48698573d",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "712b0ceb_4d109041",
        "filename": "cps-ncmp-service/src/main/java/org/onap/cps/ncmp/api/impl/events/cmsubscription/CmNotificationSubscriptionNcmpOutEventProducer.java",
        "patchSetId": 13
      },
      "lineNbr": 61,
      "author": {
        "id": 7965
      },
      "writtenOn": "2024-03-27T15:51:47Z",
      "side": 1,
      "message": "these are purely in memory datastructure.\nIf the server shuts down then its all cleared.\nBut yes the calling code will invoke this code whenever there is a new event to NCMP.\n\nIdea is to have the below flow.\n- Clients sends us the subscription request ( we read it , save it in HZ etc )\n- Now we want to schedule the event in hope that we want to send the response back to the client reading from HZ ( whatever the state be )\n- if the DMI responds WITHIN the configured time then we cancel the scheduled task and publish the response event on demand.\n- if the DMI doesnt responds back then the scheduled job will anyways do what its scheduled to do.",
      "parentUuid": "4f82b88c_8b6e7a00",
      "range": {
        "startLine": 61,
        "startChar": 4,
        "endLine": 61,
        "endChar": 117
      },
      "revId": "2b7a3d4eb23ab62da84e2fdded6fd0f48698573d",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0189b6d0_3f52d2fe",
        "filename": "cps-ncmp-service/src/main/java/org/onap/cps/ncmp/api/impl/events/cmsubscription/CmNotificationSubscriptionNcmpOutEventProducer.java",
        "patchSetId": 13
      },
      "lineNbr": 61,
      "author": {
        "id": 6742
      },
      "writtenOn": "2024-03-27T15:55:19Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "712b0ceb_4d109041",
      "range": {
        "startLine": 61,
        "startChar": 4,
        "endLine": 61,
        "endChar": 117
      },
      "revId": "2b7a3d4eb23ab62da84e2fdded6fd0f48698573d",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22ff0892_dfb9c1c8",
        "filename": "cps-ncmp-service/src/test/groovy/org/onap/cps/ncmp/api/impl/events/cmsubscription/CmNotificationSubscriptionNcmpOutEventProducerSpec.groovy",
        "patchSetId": 13
      },
      "lineNbr": 67,
      "author": {
        "id": 6742
      },
      "writtenOn": "2024-03-27T15:42:42Z",
      "side": 1,
      "message": "Why is the sleep needed? Just to simulate DMI delay?",
      "range": {
        "startLine": 65,
        "startChar": 146,
        "endLine": 67,
        "endChar": 28
      },
      "revId": "2b7a3d4eb23ab62da84e2fdded6fd0f48698573d",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2a673211_78e3f802",
        "filename": "cps-ncmp-service/src/test/groovy/org/onap/cps/ncmp/api/impl/events/cmsubscription/CmNotificationSubscriptionNcmpOutEventProducerSpec.groovy",
        "patchSetId": 13
      },
      "lineNbr": 67,
      "author": {
        "id": 7965
      },
      "writtenOn": "2024-03-27T15:51:47Z",
      "side": 1,
      "message": "yeah.. Receiving the event from DMI.",
      "parentUuid": "22ff0892_dfb9c1c8",
      "range": {
        "startLine": 65,
        "startChar": 146,
        "endLine": 67,
        "endChar": 28
      },
      "revId": "2b7a3d4eb23ab62da84e2fdded6fd0f48698573d",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "25cce492_1ed92012",
        "filename": "cps-ncmp-service/src/test/groovy/org/onap/cps/ncmp/api/impl/events/cmsubscription/CmNotificationSubscriptionNcmpOutEventProducerSpec.groovy",
        "patchSetId": 13
      },
      "lineNbr": 67,
      "author": {
        "id": 6742
      },
      "writtenOn": "2024-03-27T15:55:19Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "2a673211_78e3f802",
      "range": {
        "startLine": 65,
        "startChar": 146,
        "endLine": 67,
        "endChar": 28
      },
      "revId": "2b7a3d4eb23ab62da84e2fdded6fd0f48698573d",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "A maximum \u0027Code-Review\u0027 vote from a non-uploader is required for the \u0027Code-Review\u0027 label. A minimum vote is blocking."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "2b7a3d4eb23ab62da84e2fdded6fd0f48698573d",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "A maximum \u0027Verified\u0027 vote from \u0027ONAP Required GHA\u0027 and one other CI or committer that is a non-uploader is required for the \u0027Verified\u0027 label. A minimum vote is blocking."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX,user\u003donap.required.gha AND label:Verified\u003dMAX,count\u003e\u003d2 AND label:Verified\u003dMAX,user\u003dnon_uploader AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX,user=onap.required.gha AND label:Verified=MAX,count>=2 AND label:Verified=MAX,user=non_uploader AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX,user=onap.required.gha","label:Verified=MAX,user=non_uploader","label:Verified=MAX,count>=2"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "2b7a3d4eb23ab62da84e2fdded6fd0f48698573d",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}