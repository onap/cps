{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "fac541b0_a3e7430a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 7965
      },
      "writtenOn": "2024-04-24T14:50:29Z",
      "side": 1,
      "message": "good for me.",
      "revId": "2a1e5aac09411523e38fc7126b523ea4f6ac5f78",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "308cc5ba_d6056ef3",
        "filename": "cps-ncmp-service/src/main/java/org/onap/cps/ncmp/api/impl/events/cmsubscription/CmNotificationSubscriptionNcmpInEventConsumer.java",
        "patchSetId": 6
      },
      "lineNbr": 64,
      "author": {
        "id": 6742
      },
      "writtenOn": "2024-04-24T16:20:54Z",
      "side": 1,
      "message": "Nb question: I assume there will be other event types later? Otherwise we should log the \u0027else\u0027 condition",
      "range": {
        "startLine": 64,
        "startChar": 8,
        "endLine": 64,
        "endChar": 9
      },
      "revId": "2a1e5aac09411523e38fc7126b523ea4f6ac5f78",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "62301be2_e2e0fe99",
        "filename": "cps-ncmp-service/src/test/groovy/org/onap/cps/ncmp/api/impl/events/cmsubscription/CmNotificationSubscriptionNcmpInEventConsumerSpec.groovy",
        "patchSetId": 6
      },
      "lineNbr": 88,
      "author": {
        "id": 8063
      },
      "writtenOn": "2024-04-24T16:21:26Z",
      "side": 1,
      "message": "NB: would try to get info level logger by some other way other than providing an index to the list",
      "range": {
        "startLine": 88,
        "startChar": 26,
        "endLine": 88,
        "endChar": 28
      },
      "revId": "2a1e5aac09411523e38fc7126b523ea4f6ac5f78",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd70b618_cd8dae1a",
        "filename": "cps-ncmp-service/src/test/groovy/org/onap/cps/ncmp/api/impl/events/cmsubscription/mapper/CmNotificationSubscriptionNcmpOutEventMapperSpec.groovy",
        "patchSetId": 6
      },
      "lineNbr": 60,
      "author": {
        "id": 8063
      },
      "writtenOn": "2024-04-24T16:21:26Z",
      "side": 1,
      "message": "NB: assert result.data.subscriptionId \u003d\u003d \u0027test-subscription\u0027",
      "range": {
        "startLine": 60,
        "startChar": 12,
        "endLine": 60,
        "endChar": 61
      },
      "revId": "2a1e5aac09411523e38fc7126b523ea4f6ac5f78",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d534b12c_1f4d1a66",
        "filename": "cps-ncmp-service/src/test/groovy/org/onap/cps/ncmp/api/impl/events/cmsubscription/mapper/CmNotificationSubscriptionNcmpOutEventMapperSpec.groovy",
        "patchSetId": 6
      },
      "lineNbr": 62,
      "author": {
        "id": 8063
      },
      "writtenOn": "2024-04-24T16:21:26Z",
      "side": 1,
      "message": "NB: Same as above\u0027 (assert) please mind the order of element in the list can be changed in the future would still pass",
      "range": {
        "startLine": 62,
        "startChar": 12,
        "endLine": 62,
        "endChar": 61
      },
      "revId": "2a1e5aac09411523e38fc7126b523ea4f6ac5f78",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "A maximum \u0027Code-Review\u0027 vote from a non-uploader is required for the \u0027Code-Review\u0027 label. A minimum vote is blocking."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "2a1e5aac09411523e38fc7126b523ea4f6ac5f78",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "A maximum \u0027Verified\u0027 vote from \u0027ONAP Required GHA\u0027 and one other CI or committer that is a non-uploader is required for the \u0027Verified\u0027 label. A minimum vote is blocking."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX,user\u003donap.required.gha AND label:Verified\u003dMAX,count\u003e\u003d2 AND label:Verified\u003dMAX,user\u003dnon_uploader AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX,user=onap.required.gha AND label:Verified=MAX,count>=2 AND label:Verified=MAX,user=non_uploader AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX,user=onap.required.gha","label:Verified=MAX,user=non_uploader","label:Verified=MAX,count>=2"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "2a1e5aac09411523e38fc7126b523ea4f6ac5f78",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}