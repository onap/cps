{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "65e40256_a27ca49b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 7965
      },
      "writtenOn": "2024-03-05T09:58:11Z",
      "side": 1,
      "message": "logically all makes sense.\njust need to confirm on one of the explaination.",
      "revId": "60dc411a89684d25b573ffb19b9759000cabdceb",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cefd6a9a_1021f2ad",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 6639
      },
      "writtenOn": "2024-03-06T09:38:56Z",
      "side": 1,
      "message": "can you answer teh question below please",
      "revId": "60dc411a89684d25b573ffb19b9759000cabdceb",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c3a03f4_28f5d528",
        "filename": "integration-test/src/test/groovy/org/onap/cps/integration/base/CpsIntegrationSpecBase.groovy",
        "patchSetId": 2
      },
      "lineNbr": 124,
      "author": {
        "id": 6639
      },
      "writtenOn": "2024-03-06T09:38:56Z",
      "side": 1,
      "message": "just curious about this",
      "range": {
        "startLine": 124,
        "startChar": 67,
        "endLine": 124,
        "endChar": 98
      },
      "revId": "60dc411a89684d25b573ffb19b9759000cabdceb",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c9830e0c_1bede1b2",
        "filename": "integration-test/src/test/groovy/org/onap/cps/integration/functional/NcmpCmHandleCreateSpec.groovy",
        "patchSetId": 2
      },
      "lineNbr": 153,
      "author": {
        "id": 7965
      },
      "writtenOn": "2024-03-05T09:58:11Z",
      "side": 1,
      "message": "NB: can u explain this 3 minutes.\nHopefully coming from the retry logic we have. Exponentially we update the timing based on the retry count. right ?",
      "range": {
        "startLine": 153,
        "startChar": 72,
        "endLine": 153,
        "endChar": 87
      },
      "revId": "60dc411a89684d25b573ffb19b9759000cabdceb",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "088e0635_506cd5ac",
        "filename": "integration-test/src/test/groovy/org/onap/cps/integration/functional/NcmpCmHandleCreateSpec.groovy",
        "patchSetId": 2
      },
      "lineNbr": 153,
      "author": {
        "id": 7965
      },
      "writtenOn": "2024-03-06T09:05:26Z",
      "side": 1,
      "message": "ok so as discussed yesterday , u are subtracting 3 minutes just for the test to not wait and just mimic the behaviour of the retry logic",
      "parentUuid": "c9830e0c_1bede1b2",
      "range": {
        "startLine": 153,
        "startChar": 72,
        "endLine": 153,
        "endChar": 87
      },
      "revId": "60dc411a89684d25b573ffb19b9759000cabdceb",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "A maximum \u0027Code-Review\u0027 vote from a non-uploader is required for the \u0027Code-Review\u0027 label. A minimum vote is blocking."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "60dc411a89684d25b573ffb19b9759000cabdceb",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "A maximum \u0027Verified\u0027 vote from \u0027ONAP Required GHA\u0027 and one other CI or committer that is a non-uploader is required for the \u0027Verified\u0027 label. A minimum vote is blocking."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX,user\u003donap.required.gha AND label:Verified\u003dMAX,count\u003e\u003d2 AND label:Verified\u003dMAX,user\u003dnon_uploader AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX,user=onap.required.gha AND label:Verified=MAX,count>=2 AND label:Verified=MAX,user=non_uploader AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX,user=onap.required.gha","label:Verified=MAX,user=non_uploader","label:Verified=MAX,count>=2"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "60dc411a89684d25b573ffb19b9759000cabdceb",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}