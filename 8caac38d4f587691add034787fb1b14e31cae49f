{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "03fd8c8f_56078f4f",
        "filename": "cps-ri/src/main/java/org/onap/cps/ri/repository/FragmentRepositoryCpsPathQueryImpl.java",
        "patchSetId": 1
      },
      "lineNbr": 60,
      "author": {
        "id": 7957
      },
      "writtenOn": "2025-03-18T12:11:09Z",
      "side": 1,
      "message": "Use @Transactional(readOnly \u003d true) for read-only operations. It optimizes performance by avoiding unnecessary transaction overhead and potential write locks.\n\n\nUse @Transactional (without readOnly \u003d true) only if the method modifies data (insert, update, delete).\n\nSame for all other methods in this class.",
      "range": {
        "startLine": 60,
        "startChar": 3,
        "endLine": 60,
        "endChar": 18
      },
      "revId": "8caac38d4f587691add034787fb1b14e31cae49f",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "13d360cb_02a83693",
        "filename": "cps-ri/src/main/java/org/onap/cps/ri/repository/FragmentRepositoryCpsPathQueryImpl.java",
        "patchSetId": 1
      },
      "lineNbr": 60,
      "author": {
        "id": 6742
      },
      "writtenOn": "2025-03-18T15:04:43Z",
      "side": 1,
      "message": "I wonder if we even need transactions at all? We only execute a single SQL query in each case, what do you think?",
      "parentUuid": "03fd8c8f_56078f4f",
      "range": {
        "startLine": 60,
        "startChar": 3,
        "endLine": 60,
        "endChar": 18
      },
      "revId": "8caac38d4f587691add034787fb1b14e31cae49f",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e8b6f09a_2af6ef6a",
        "filename": "cps-ri/src/main/java/org/onap/cps/ri/repository/FragmentRepositoryCpsPathQueryImpl.java",
        "patchSetId": 1
      },
      "lineNbr": 60,
      "author": {
        "id": 7957
      },
      "writtenOn": "2025-03-18T15:39:38Z",
      "side": 1,
      "message": "Agree with you, DO NOT use @Transactional if executing a single SQL query per method call.",
      "parentUuid": "13d360cb_02a83693",
      "range": {
        "startLine": 60,
        "startChar": 3,
        "endLine": 60,
        "endChar": 18
      },
      "revId": "8caac38d4f587691add034787fb1b14e31cae49f",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9d668d13_0cb04920",
        "filename": "cps-ri/src/main/java/org/onap/cps/ri/repository/FragmentRepositoryCpsPathQueryImpl.java",
        "patchSetId": 1
      },
      "lineNbr": 60,
      "author": {
        "id": 7957
      },
      "writtenOn": "2025-03-19T10:09:34Z",
      "side": 1,
      "message": "If reading while writing, consider @Transactional with isolation level:\n \nIf one method writes data while another reads it at the same time, we might face dirty reads, non-repeatable reads, or phantom reads.\n\nSolution: Adjust the transaction isolation level (e.g., READ_COMMITTED, REPEATABLE_READ, SERIALIZABLE).\n\n@Transactional(isolation \u003d Isolation.READ_COMMITTED)\n\nðŸ”¹ READ_COMMITTED: Ensures only committed changes are visible.\nðŸ”¹ REPEATABLE_READ: Prevents non-repeatable reads but allows phantom reads.\nðŸ”¹ SERIALIZABLE: Fully isolates transactions (but can reduce performance).\n\nWe can have a quick call and resolve it.",
      "parentUuid": "e8b6f09a_2af6ef6a",
      "range": {
        "startLine": 60,
        "startChar": 3,
        "endLine": 60,
        "endChar": 18
      },
      "revId": "8caac38d4f587691add034787fb1b14e31cae49f",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a"
    }
  ]
}