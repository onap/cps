{
  "comments": [
    {
      "key": {
        "uuid": "9fc1853e_43d82f00",
        "filename": "cps-ri/src/main/java/org/onap/cps/spi/impl/CpsDataPersistenceServiceImpl.java",
        "patchSetId": 6
      },
      "lineNbr": 148,
      "author": {
        "id": 6841
      },
      "writtenOn": "2021-02-11T11:42:39Z",
      "side": 1,
      "message": "I would call this updateDataNodeAndReplaceDescendant\nIs there a way of updating the children without replacing the database ID?",
      "range": {
        "startLine": 148,
        "startChar": 16,
        "endLine": 148,
        "endChar": 30
      },
      "revId": "c59031c1b1b16f84ad80c67b51dff6893315bae1",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a414f9c7_06536259",
        "filename": "cps-ri/src/main/java/org/onap/cps/spi/impl/CpsDataPersistenceServiceImpl.java",
        "patchSetId": 6
      },
      "lineNbr": 148,
      "author": {
        "id": 6841
      },
      "writtenOn": "2021-02-11T11:42:39Z",
      "side": 1,
      "message": "rename to replacementDataNode",
      "range": {
        "startLine": 148,
        "startChar": 99,
        "endLine": 148,
        "endChar": 107
      },
      "revId": "c59031c1b1b16f84ad80c67b51dff6893315bae1",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d1c4fdd_f0735ace",
        "filename": "cps-ri/src/main/java/org/onap/cps/spi/impl/CpsDataPersistenceServiceImpl.java",
        "patchSetId": 6
      },
      "lineNbr": 148,
      "author": {
        "id": 7362
      },
      "writtenOn": "2021-02-15T13:17:58Z",
      "side": 1,
      "message": "replacement is an internal implementation approach, \nupdateDataNode is an SPI method.\nimplementation may be changed, interface should not",
      "parentUuid": "9fc1853e_43d82f00",
      "range": {
        "startLine": 148,
        "startChar": 16,
        "endLine": 148,
        "endChar": 30
      },
      "revId": "c59031c1b1b16f84ad80c67b51dff6893315bae1",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c352ed70_5096886e",
        "filename": "cps-ri/src/main/java/org/onap/cps/spi/impl/CpsDataPersistenceServiceImpl.java",
        "patchSetId": 6
      },
      "lineNbr": 153,
      "author": {
        "id": 6738
      },
      "writtenOn": "2021-02-12T11:26:47Z",
      "side": 1,
      "message": "Is this check really required here? Would the parent child relationship be well captured in case UPDATE_LEAVES_AND_DESCENDANT_NODES is set to false?\nMy understanding is that the parent datanode id would be changed when fragmentRepository.save() is executed, but the child would now be refering to an invalid parent id.",
      "range": {
        "startLine": 153,
        "startChar": 12,
        "endLine": 153,
        "endChar": 73
      },
      "revId": "c59031c1b1b16f84ad80c67b51dff6893315bae1",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "27bb305e_ae145142",
        "filename": "cps-ri/src/main/java/org/onap/cps/spi/impl/CpsDataPersistenceServiceImpl.java",
        "patchSetId": 6
      },
      "lineNbr": 153,
      "author": {
        "id": 7362
      },
      "writtenOn": "2021-02-15T13:17:58Z",
      "side": 1,
      "message": "resetting parent_id for child nodes will cause automatic \ncascade deletion for these entries because of deleteOrphans \u003d true\nno inconsistency is expected.",
      "parentUuid": "c352ed70_5096886e",
      "range": {
        "startLine": 153,
        "startChar": 12,
        "endLine": 153,
        "endChar": 73
      },
      "revId": "c59031c1b1b16f84ad80c67b51dff6893315bae1",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dfcaaed1_33433b2a",
        "filename": "cps-ri/src/main/java/org/onap/cps/spi/impl/CpsDataPersistenceServiceImpl.java",
        "patchSetId": 6
      },
      "lineNbr": 155,
      "author": {
        "id": 6841
      },
      "writtenOn": "2021-02-11T11:42:39Z",
      "side": 1,
      "message": "extract out method to make more readable e.g. deleteExistingDescendant",
      "range": {
        "startLine": 154,
        "startChar": 0,
        "endLine": 155,
        "endChar": 53
      },
      "revId": "c59031c1b1b16f84ad80c67b51dff6893315bae1",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0dc2b574_8e33900a",
        "filename": "cps-ri/src/main/java/org/onap/cps/spi/impl/CpsDataPersistenceServiceImpl.java",
        "patchSetId": 6
      },
      "lineNbr": 155,
      "author": {
        "id": 7362
      },
      "writtenOn": "2021-02-15T13:17:58Z",
      "side": 1,
      "message": "sorry, these two lines are already readable enough",
      "parentUuid": "dfcaaed1_33433b2a",
      "range": {
        "startLine": 154,
        "startChar": 0,
        "endLine": 155,
        "endChar": 53
      },
      "revId": "c59031c1b1b16f84ad80c67b51dff6893315bae1",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a29275f_890302dd",
        "filename": "cps-ri/src/main/java/org/onap/cps/spi/impl/CpsDataPersistenceServiceImpl.java",
        "patchSetId": 6
      },
      "lineNbr": 161,
      "author": {
        "id": 6841
      },
      "writtenOn": "2021-02-11T11:42:39Z",
      "side": 1,
      "message": "extract out to variable to reduce complexity and increase readability",
      "range": {
        "startLine": 157,
        "startChar": 12,
        "endLine": 161,
        "endChar": 61
      },
      "revId": "c59031c1b1b16f84ad80c67b51dff6893315bae1",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "448fac51_5b74f5a5",
        "filename": "cps-ri/src/test/groovy/org/onap/cps/spi/impl/CpsDataPersistenceServiceSpec.groovy",
        "patchSetId": 6
      },
      "lineNbr": 60,
      "author": {
        "id": 6841
      },
      "writtenOn": "2021-02-11T11:42:39Z",
      "side": 1,
      "message": "Why are we adding this data in our test? can you give the leafnames and values more readable values",
      "range": {
        "startLine": 60,
        "startChar": 65,
        "endLine": 60,
        "endChar": 81
      },
      "revId": "c59031c1b1b16f84ad80c67b51dff6893315bae1",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6fc0774a_88bc6dad",
        "filename": "cps-ri/src/test/groovy/org/onap/cps/spi/impl/CpsDataPersistenceServiceSpec.groovy",
        "patchSetId": 6
      },
      "lineNbr": 61,
      "author": {
        "id": 6841
      },
      "writtenOn": "2021-02-11T11:42:39Z",
      "side": 1,
      "message": "why are we using leaf lists? The code that is being tested does nothing with this data. Adding a leaf list is confusing.",
      "range": {
        "startLine": 61,
        "startChar": 60,
        "endLine": 61,
        "endChar": 75
      },
      "revId": "c59031c1b1b16f84ad80c67b51dff6893315bae1",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7d645da3_8ecf1575",
        "filename": "cps-ri/src/test/groovy/org/onap/cps/spi/impl/CpsDataPersistenceServiceSpec.groovy",
        "patchSetId": 6
      },
      "lineNbr": 219,
      "author": {
        "id": 6841
      },
      "writtenOn": "2021-02-11T11:42:39Z",
      "side": 1,
      "message": "I would re word this as \u0027leaves contain expected new data\u0027",
      "range": {
        "startLine": 219,
        "startChar": 15,
        "endLine": 219,
        "endChar": 60
      },
      "revId": "c59031c1b1b16f84ad80c67b51dff6893315bae1",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b0a3570e_7070a747",
        "filename": "cps-ri/src/test/groovy/org/onap/cps/spi/impl/CpsDataPersistenceServiceSpec.groovy",
        "patchSetId": 6
      },
      "lineNbr": 220,
      "author": {
        "id": 6841
      },
      "writtenOn": "2021-02-11T11:42:39Z",
      "side": 1,
      "message": "Can you extract this to a constant?",
      "range": {
        "startLine": 220,
        "startChar": 60,
        "endLine": 220,
        "endChar": 65
      },
      "revId": "c59031c1b1b16f84ad80c67b51dff6893315bae1",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c7b07c7_8a1b37ed",
        "filename": "cps-ri/src/test/groovy/org/onap/cps/spi/impl/CpsDataPersistenceServiceSpec.groovy",
        "patchSetId": 6
      },
      "lineNbr": 270,
      "author": {
        "id": 6841
      },
      "writtenOn": "2021-02-11T11:42:39Z",
      "side": 1,
      "message": "See comments on previous test. \nCould you combine the above 3 tests?",
      "range": {
        "startLine": 231,
        "startChar": 3,
        "endLine": 270,
        "endChar": 5
      },
      "revId": "c59031c1b1b16f84ad80c67b51dff6893315bae1",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "090e6225_df5a7bd8",
        "filename": "cps-ri/src/test/groovy/org/onap/cps/spi/impl/CpsDataPersistenceServiceSpec.groovy",
        "patchSetId": 6
      },
      "lineNbr": 292,
      "author": {
        "id": 6841
      },
      "writtenOn": "2021-02-11T11:42:39Z",
      "side": 1,
      "message": "extractLeavesFromJsonAsMap",
      "range": {
        "startLine": 292,
        "startChar": 31,
        "endLine": 292,
        "endChar": 43
      },
      "revId": "c59031c1b1b16f84ad80c67b51dff6893315bae1",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4aa9289d_e50623c3",
        "filename": "cps-ri/src/test/resources/data/fragment.sql",
        "patchSetId": 6
      },
      "lineNbr": 28,
      "author": {
        "id": 6841
      },
      "writtenOn": "2021-02-11T11:42:39Z",
      "side": 1,
      "message": "this looks better than the previous block.",
      "range": {
        "startLine": 25,
        "startChar": 0,
        "endLine": 28,
        "endChar": 95
      },
      "revId": "c59031c1b1b16f84ad80c67b51dff6893315bae1",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "47c05eeb_86e413ab",
        "filename": "cps-service/src/main/java/org/onap/cps/spi/CpsDataPersistenceService.java",
        "patchSetId": 6
      },
      "lineNbr": 77,
      "author": {
        "id": 6679
      },
      "writtenOn": "2021-02-11T09:25:39Z",
      "side": 1,
      "message": "commented on the other commit, but this goes first I guess. I would rather have two methods that one with UpdateDescendantsOption flag.",
      "revId": "c59031c1b1b16f84ad80c67b51dff6893315bae1",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5703840c_6a2d1a22",
        "filename": "cps-service/src/main/java/org/onap/cps/spi/CpsDataPersistenceService.java",
        "patchSetId": 6
      },
      "lineNbr": 77,
      "author": {
        "id": 6841
      },
      "writtenOn": "2021-02-11T11:42:39Z",
      "side": 1,
      "message": "I agree.",
      "parentUuid": "47c05eeb_86e413ab",
      "revId": "c59031c1b1b16f84ad80c67b51dff6893315bae1",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "95b03f08_eeca20ba",
        "filename": "cps-service/src/main/java/org/onap/cps/spi/CpsDataPersistenceService.java",
        "patchSetId": 6
      },
      "lineNbr": 77,
      "author": {
        "id": 7362
      },
      "writtenOn": "2021-02-15T15:44:21Z",
      "side": 1,
      "message": "i see no benefits in using 2 methods (to be also applied on API and on REST levels) vs single option. also for a consistency same approach should be applied to data extraction, as result we\u0027ll have a *pair* of methods (endpoints) for any *single* data related action. \nseems very extra to me. imo an option should be treated as option, not as separate flow.",
      "parentUuid": "5703840c_6a2d1a22",
      "revId": "c59031c1b1b16f84ad80c67b51dff6893315bae1",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    }
  ]
}