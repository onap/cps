{
  "comments": [
    {
      "key": {
        "uuid": "42f07915_0679f248",
        "filename": "cps-path-parser/src/main/java/org/onap/cps/cpspath/parser/CpsPathBuilder.java",
        "patchSetId": 23
      },
      "lineNbr": 103,
      "author": {
        "id": 7830
      },
      "writtenOn": "2023-03-29T14:11:56Z",
      "side": 1,
      "message": "Not sure on this logic? why is it that only and is used if its the ancestorAxis, should this not also be appendOperatorCondition?",
      "range": {
        "startLine": 100,
        "startChar": 8,
        "endLine": 103,
        "endChar": 9
      },
      "revId": "a30b73cc203f3d308fe3a9b2dc72c677df1550e2",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e27941d_ce0e3485",
        "filename": "cps-path-parser/src/main/java/org/onap/cps/cpspath/parser/CpsPathBuilder.java",
        "patchSetId": 23
      },
      "lineNbr": 103,
      "author": {
        "id": 7840
      },
      "writtenOn": "2023-03-29T14:36:42Z",
      "side": 1,
      "message": "Since we are using QueueBooleanOperators in OperatorCondition ,In case of ancestoraxis   \"ancestor that is a list with compound key\" fails beacuse when cpspath is queried it intiallz assumes as normalizedpath until processingancestoraxis becomes true,once it recognise the ancestor tries to get the attributes ,operator but the  QueueBooleanOperators is empty and get null operator. So, added different condition",
      "parentUuid": "42f07915_0679f248",
      "range": {
        "startLine": 100,
        "startChar": 8,
        "endLine": 103,
        "endChar": 9
      },
      "revId": "a30b73cc203f3d308fe3a9b2dc72c677df1550e2",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d96a0c2_a50fe57b",
        "filename": "cps-path-parser/src/main/java/org/onap/cps/cpspath/parser/CpsPathBuilder.java",
        "patchSetId": 23
      },
      "lineNbr": 103,
      "author": {
        "id": 6742
      },
      "writtenOn": "2023-03-29T16:08:28Z",
      "side": 1,
      "message": "I agree with Luke, we should not have two different methods, since appendCondition only supports AND.",
      "parentUuid": "1e27941d_ce0e3485",
      "range": {
        "startLine": 100,
        "startChar": 8,
        "endLine": 103,
        "endChar": 9
      },
      "revId": "a30b73cc203f3d308fe3a9b2dc72c677df1550e2",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e28597b_4e26a00d",
        "filename": "cps-path-parser/src/main/java/org/onap/cps/cpspath/parser/CpsPathBuilder.java",
        "patchSetId": 23
      },
      "lineNbr": 103,
      "author": {
        "id": 7830
      },
      "writtenOn": "2023-03-30T10:12:38Z",
      "side": 1,
      "message": "Anupriya explained to me and I think it makes sense, if the ancestor axis only comes into effect when it is a compound key then and can only be used and or cannot\neg in subscription.yang we use compound key clientID and clientName",
      "parentUuid": "4d96a0c2_a50fe57b",
      "range": {
        "startLine": 100,
        "startChar": 8,
        "endLine": 103,
        "endChar": 9
      },
      "revId": "a30b73cc203f3d308fe3a9b2dc72c677df1550e2",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e56d23ab_8ed26b23",
        "filename": "cps-path-parser/src/main/java/org/onap/cps/cpspath/parser/CpsPathBuilder.java",
        "patchSetId": 23
      },
      "lineNbr": 103,
      "author": {
        "id": 6742
      },
      "writtenOn": "2023-03-30T10:34:23Z",
      "side": 1,
      "message": "Thanks for the explanation, that kinda makes sense now. The original code here is confusing too!\nBut I\u0027d like to see a test using OR with ancestor-axis, just to make sure that case is not affected, e.g.\n  //author[@Surname\u003d\"Smith\" or @title\u003d\"Dune\"]/ancestor::book\n\nwhich should return two different ancestors.",
      "parentUuid": "9e28597b_4e26a00d",
      "range": {
        "startLine": 100,
        "startChar": 8,
        "endLine": 103,
        "endChar": 9
      },
      "revId": "a30b73cc203f3d308fe3a9b2dc72c677df1550e2",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7bc5f013_691af97c",
        "filename": "cps-path-parser/src/main/java/org/onap/cps/cpspath/parser/CpsPathBuilder.java",
        "patchSetId": 23
      },
      "lineNbr": 103,
      "author": {
        "id": 7840
      },
      "writtenOn": "2023-03-30T14:27:09Z",
      "side": 1,
      "message": "made changes ,Now append condition supports both and/or and for ancestor-axis also",
      "parentUuid": "e56d23ab_8ed26b23",
      "range": {
        "startLine": 100,
        "startChar": 8,
        "endLine": 103,
        "endChar": 9
      },
      "revId": "a30b73cc203f3d308fe3a9b2dc72c677df1550e2",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a878fe89_c12d53b4",
        "filename": "cps-path-parser/src/main/java/org/onap/cps/cpspath/parser/CpsPathBuilder.java",
        "patchSetId": 23
      },
      "lineNbr": 197,
      "author": {
        "id": 7830
      },
      "writtenOn": "2023-03-29T14:11:56Z",
      "side": 1,
      "message": "If above comment is correct then this method can be removed",
      "range": {
        "startLine": 188,
        "startChar": 4,
        "endLine": 197,
        "endChar": 5
      },
      "revId": "a30b73cc203f3d308fe3a9b2dc72c677df1550e2",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "49fb8711_f7e3539d",
        "filename": "cps-path-parser/src/main/java/org/onap/cps/cpspath/parser/CpsPathBuilder.java",
        "patchSetId": 23
      },
      "lineNbr": 197,
      "author": {
        "id": 6742
      },
      "writtenOn": "2023-03-29T16:08:28Z",
      "side": 1,
      "message": "Agreed. This method only supports AND but not OR. I\u0027m guessing this will cause problems, but I can\u0027t verify right now because of the bug in FragmentQueryBuilder.java:76",
      "parentUuid": "a878fe89_c12d53b4",
      "range": {
        "startLine": 188,
        "startChar": 4,
        "endLine": 197,
        "endChar": 5
      },
      "revId": "a30b73cc203f3d308fe3a9b2dc72c677df1550e2",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d2504abc_5061eaf6",
        "filename": "cps-path-parser/src/main/java/org/onap/cps/cpspath/parser/CpsPathBuilder.java",
        "patchSetId": 23
      },
      "lineNbr": 197,
      "author": {
        "id": 6742
      },
      "writtenOn": "2023-03-30T10:34:23Z",
      "side": 1,
      "message": "As per explanation for line 103, this code is only used for compound keys. Maybe this method needs a new name, e.g. appendConditionForCompoundKey",
      "parentUuid": "49fb8711_f7e3539d",
      "range": {
        "startLine": 188,
        "startChar": 4,
        "endLine": 197,
        "endChar": 5
      },
      "revId": "a30b73cc203f3d308fe3a9b2dc72c677df1550e2",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a10990c6_43cb8ed9",
        "filename": "cps-ri/src/main/java/org/onap/cps/spi/repository/FragmentQueryBuilder.java",
        "patchSetId": 23
      },
      "lineNbr": 76,
      "author": {
        "id": 6742
      },
      "writtenOn": "2023-03-29T16:08:28Z",
      "side": 1,
      "message": "Because of operator precedence in SQL, we need to bracket the leaf conditions check.\nExample:\n\nQuery for Smith:\n  //author[@Surname\u003d\"Smith\"]\n\nreturns 1 author (Joe Smith):\n  /shops/shop[@id\u003d\u00271\u0027]/categories[@code\u003d\u00272\u0027]/book/author[@FirstName\u003d\u0027Joe\u0027 and @Surname\u003d\u0027Smith\u0027]\n\nQuery for author of Dune:\n  //author[@title\u003d\"Dune\"]\n\nreturns 1 author (Joe Bloggs):\n  /shops/shop[@id\u003d\u00271\u0027]/categories[@code\u003d\u00271\u0027]/book/author[@FirstName\u003d\u0027Joe\u0027 and @Surname\u003d\u0027Bloggs\u0027]\n\nBut query for Smith or Dune:\n  //author[@Surname\u003d\"Smith\" or @title\u003d\"Dune\"]\n\nreturns 3 authors! (1 duplicated)\n  /shops/shop[@id\u003d\u00271\u0027]/categories[@code\u003d\u00271\u0027]/book/author[@FirstName\u003d\u0027Joe\u0027 and @Surname\u003d\u0027Bloggs\u0027]\n  /shops/shop[@id\u003d\u00271\u0027]/categories[@code\u003d\u00272\u0027]/book/author[@FirstName\u003d\u0027Joe\u0027 and @Surname\u003d\u0027Smith\u0027]\n  /shops/shop[@id\u003d\u00271\u0027]/categories[@code\u003d\u00272\u0027]/book/author[@FirstName\u003d\u0027Joe\u0027 and @Surname\u003d\u0027Smith\u0027]\n\nLooking at the SQL:\n    SELECT * FROM FRAGMENT \n    WHERE\n        anchor_id \u003d ? \n        AND xpath ~ ? \n        AND attributes @\u003e \u0027{\"title\":\"Dune\"}\u0027\n         OR attributes @\u003e \u0027{\"Surname\":\"Smith\"}\u0027\n\nI think the attribute conditions need to be bracketed, like this:\n    SELECT * FROM FRAGMENT \n    WHERE\n        anchor_id \u003d ? \n        AND xpath ~ ? \n        AND (attributes @\u003e \u0027{\"title\":\"Dune\"}\u0027\n         OR attributes @\u003e \u0027{\"Surname\":\"Smith\"}\u0027)",
      "revId": "a30b73cc203f3d308fe3a9b2dc72c677df1550e2",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0568af03_f6bace70",
        "filename": "cps-ri/src/main/java/org/onap/cps/spi/repository/FragmentQueryBuilder.java",
        "patchSetId": 23
      },
      "lineNbr": 76,
      "author": {
        "id": 6742
      },
      "writtenOn": "2023-03-29T16:52:20Z",
      "side": 1,
      "message": "Note: in above, the \"duplicate\" author is coming from a different anchor. Without brackets, the OR in SQL will skip the anchor_id and xpath checks, giving incorrect results.",
      "parentUuid": "a10990c6_43cb8ed9",
      "revId": "a30b73cc203f3d308fe3a9b2dc72c677df1550e2",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "68c69507_9017b866",
        "filename": "cps-ri/src/main/java/org/onap/cps/spi/repository/FragmentQueryBuilder.java",
        "patchSetId": 23
      },
      "lineNbr": 76,
      "author": {
        "id": 6742
      },
      "writtenOn": "2023-03-30T14:54:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0568af03_f6bace70",
      "revId": "a30b73cc203f3d308fe3a9b2dc72c677df1550e2",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "59f3c868_2cacaf86",
        "filename": "cps-ri/src/test/groovy/org/onap/cps/spi/impl/CpsDataPersistenceQueryDataNodeSpec.groovy",
        "patchSetId": 23
      },
      "lineNbr": 153,
      "author": {
        "id": 6742
      },
      "writtenOn": "2023-03-29T16:08:28Z",
      "side": 1,
      "message": "OR",
      "range": {
        "startLine": 153,
        "startChar": 66,
        "endLine": 153,
        "endChar": 69
      },
      "revId": "a30b73cc203f3d308fe3a9b2dc72c677df1550e2",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    }
  ]
}