{
  "comments": [
    {
      "key": {
        "uuid": "7615c40c_83fdf09f",
        "filename": "cps-rest/src/main/resources/static/components.yml",
        "patchSetId": 11
      },
      "lineNbr": 167,
      "author": {
        "id": 5006
      },
      "writtenOn": "2021-08-26T09:14:25Z",
      "side": 1,
      "message": "nb: as i see that you are throwing validationexception on date format in service, is it good to add \n\nschema:\n    type: string\n    pattern: \u0027date pattern\u0027\n\nto make it fail fast on controller and not propagate to other layers.",
      "range": {
        "startLine": 167,
        "startChar": 8,
        "endLine": 167,
        "endChar": 20
      },
      "revId": "673c6d94830a1677e685cab82a76747a0808d347",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6304556f_335edd55",
        "filename": "cps-rest/src/main/resources/static/components.yml",
        "patchSetId": 11
      },
      "lineNbr": 167,
      "author": {
        "id": 7680
      },
      "writtenOn": "2021-08-26T12:19:25Z",
      "side": 1,
      "message": "The date format validation is in controller layer. I wanted to use the auto generated code for the format validation. There are two ways to define it.\nOption 1: is to define the format as regular expression which I think is less intuitive.\nOption 2: to define the format at date-time and pattern. But the swagger codegen does not create field with OffsetDateTime and it gives error even if the user passed the valid date.\n\n\nBoth of the options are not good enough. Let me know if you know how to achieve it in auto-generated code.",
      "parentUuid": "7615c40c_83fdf09f",
      "range": {
        "startLine": 167,
        "startChar": 8,
        "endLine": 167,
        "endChar": 20
      },
      "revId": "673c6d94830a1677e685cab82a76747a0808d347",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "97937c1b_96fe8ff6",
        "filename": "cps-rest/src/main/resources/static/components.yml",
        "patchSetId": 11
      },
      "lineNbr": 167,
      "author": {
        "id": 5006
      },
      "writtenOn": "2021-08-26T13:24:56Z",
      "side": 1,
      "message": "as given in openapi specs \n\nformat: date-time\n\ncan work for \"2021-08-20T09:12:28Z\" , please check.",
      "parentUuid": "6304556f_335edd55",
      "range": {
        "startLine": 167,
        "startChar": 8,
        "endLine": 167,
        "endChar": 20
      },
      "revId": "673c6d94830a1677e685cab82a76747a0808d347",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "97fef8af_8feb50fe",
        "filename": "cps-rest/src/main/resources/static/components.yml",
        "patchSetId": 11
      },
      "lineNbr": 167,
      "author": {
        "id": 5006
      },
      "writtenOn": "2021-08-26T13:26:44Z",
      "side": 1,
      "message": "ok, in option 2 you already tried that. I do not see anyother alternative except pattern or format. Thanks.",
      "parentUuid": "97937c1b_96fe8ff6",
      "range": {
        "startLine": 167,
        "startChar": 8,
        "endLine": 167,
        "endChar": 20
      },
      "revId": "673c6d94830a1677e685cab82a76747a0808d347",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "96d2200a_edf35109",
        "filename": "cps-service/src/test/groovy/org/onap/cps/notification/NotificationServiceSpec.groovy",
        "patchSetId": 11
      },
      "lineNbr": 48,
      "author": {
        "id": 6639
      },
      "writtenOn": "2021-08-25T19:57:09Z",
      "side": 1,
      "message": "I think you can just use Spock Spy better not mix tetsing frameworks\n(can be done later)",
      "range": {
        "startLine": 48,
        "startChar": 4,
        "endLine": 48,
        "endChar": 14
      },
      "revId": "673c6d94830a1677e685cab82a76747a0808d347",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d06fd654_8b6bdde5",
        "filename": "cps-service/src/test/groovy/org/onap/cps/notification/NotificationServiceSpec.groovy",
        "patchSetId": 11
      },
      "lineNbr": 48,
      "author": {
        "id": 7680
      },
      "writtenOn": "2021-08-25T21:07:43Z",
      "side": 1,
      "message": "Spock spy needs an object which it will be spy on. If we want to Spy an object which is autowired, we have to do it in the set up method.\n\nExample\n\n@Autowired \nNotificationErrorHandler notificationErrorHandler\nNotificationErrorHandler spyNotificationErrorHandler\n\ndef setup() {\n    spyNotificationErrorHandler \u003d Spy(notificationErrorHandler)\n    objectUnderTest \u003d ... construct the object....\n\n}\n\nBut if use @SpringSpy, it creates an Spy on the spring bean and inject the spiedBean.\n\nExample:\n\n@SpringSpy\nNotificationErrorHandler spyNotificationErrorHandler\n\n@Autowired\nType objectUnderTest;\n\nI think @SpringSpy fulfils a different use-case and it has its place when writing spring-boot test.",
      "parentUuid": "96d2200a_edf35109",
      "range": {
        "startLine": 48,
        "startChar": 4,
        "endLine": 48,
        "endChar": 14
      },
      "revId": "673c6d94830a1677e685cab82a76747a0808d347",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    }
  ]
}