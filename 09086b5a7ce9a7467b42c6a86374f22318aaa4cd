{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e0d4a3c4_6160a315",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 6639
      },
      "writtenOn": "2023-11-14T15:32:39Z",
      "side": 1,
      "message": "recheck",
      "revId": "09086b5a7ce9a7467b42c6a86374f22318aaa4cd",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "106f201f_21552f91",
        "filename": "integration-test/src/test/groovy/org/onap/cps/integration/performance/base/CpsPerfTestBase.groovy",
        "patchSetId": 1
      },
      "lineNbr": 70,
      "author": {
        "id": 6639
      },
      "writtenOn": "2023-11-14T09:15:32Z",
      "side": 1,
      "message": "just wondering do you see (significant) variations in memory usage?!",
      "range": {
        "startLine": 70,
        "startChar": 111,
        "endLine": 70,
        "endChar": 114
      },
      "revId": "09086b5a7ce9a7467b42c6a86374f22318aaa4cd",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dec371a2_8d8e8317",
        "filename": "integration-test/src/test/groovy/org/onap/cps/integration/performance/base/CpsPerfTestBase.groovy",
        "patchSetId": 1
      },
      "lineNbr": 70,
      "author": {
        "id": 6742
      },
      "writtenOn": "2023-11-14T10:25:27Z",
      "side": 1,
      "message": "Depends on the test. This test varies between 300 and 600 MB. But some tests are extremely stable, having no variance across runs.",
      "parentUuid": "106f201f_21552f91",
      "range": {
        "startLine": 70,
        "startChar": 111,
        "endLine": 70,
        "endChar": 114
      },
      "revId": "09086b5a7ce9a7467b42c6a86374f22318aaa4cd",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f2852bd1_1cdd227c",
        "filename": "integration-test/src/test/groovy/org/onap/cps/integration/performance/base/CpsPerfTestBase.groovy",
        "patchSetId": 1
      },
      "lineNbr": 70,
      "author": {
        "id": 6639
      },
      "writtenOn": "2023-11-14T15:29:28Z",
      "side": 1,
      "message": "maybe some test (which use larger around of memory) are affected by GC run during the test?!",
      "parentUuid": "dec371a2_8d8e8317",
      "range": {
        "startLine": 70,
        "startChar": 111,
        "endLine": 70,
        "endChar": 114
      },
      "revId": "09086b5a7ce9a7467b42c6a86374f22318aaa4cd",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0dd45290_3ce9dcc3",
        "filename": "integration-test/src/test/groovy/org/onap/cps/integration/performance/base/CpsPerfTestBase.groovy",
        "patchSetId": 1
      },
      "lineNbr": 70,
      "author": {
        "id": 6742
      },
      "writtenOn": "2023-11-14T15:41:14Z",
      "side": 1,
      "message": "Yes, I think you\u0027re correct. Tests that use small amounts of memory always report same usage across runs:\n   \n    4.72\t4.72\t4.72\t4.72\t4.72\n   \nBut tests using large amounts of memory tend to fluctuate:\n\n    589.15\t381.56\t266.63\t232.72\t634.67\n\nObvious explanation is that GC is freeing memory during tests.\n\nSo right now I\u0027m writing tests for the ResourceMeter class itself, and I\u0027m looking at a different way of reporting memory used.",
      "parentUuid": "f2852bd1_1cdd227c",
      "range": {
        "startLine": 70,
        "startChar": 111,
        "endLine": 70,
        "endChar": 114
      },
      "revId": "09086b5a7ce9a7467b42c6a86374f22318aaa4cd",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f9d60648_7c88628e",
        "filename": "integration-test/src/test/groovy/org/onap/cps/integration/performance/base/CpsPerfTestBase.groovy",
        "patchSetId": 1
      },
      "lineNbr": 70,
      "author": {
        "id": 6742
      },
      "writtenOn": "2023-11-15T18:24:10Z",
      "side": 1,
      "message": "CPS-1967 attempts to address this. We are now incorrectly recording current memory usage instead of peak memory usage. So if GC runs during a test, the amount of memory may be hugely under-reported (possibly zero). It may be some time before we have an adequate solution - Micro-benchmarking with Garbage Collection is hard!",
      "parentUuid": "0dd45290_3ce9dcc3",
      "range": {
        "startLine": 70,
        "startChar": 111,
        "endLine": 70,
        "endChar": 114
      },
      "revId": "09086b5a7ce9a7467b42c6a86374f22318aaa4cd",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "A maximum \u0027Code-Review\u0027 vote from a non-uploader is required for the \u0027Code-Review\u0027 label. A minimum vote is blocking."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "09086b5a7ce9a7467b42c6a86374f22318aaa4cd",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "A maximum \u0027Verified\u0027 vote from \u0027ONAP Required GHA\u0027 and one other CI or committer that is a non-uploader is required for the \u0027Verified\u0027 label. A minimum vote is blocking."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX,user\u003donap.required.gha AND label:Verified\u003dMAX,count\u003e\u003d2 AND label:Verified\u003dMAX,user\u003dnon_uploader AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX,user=onap.required.gha AND label:Verified=MAX,count>=2 AND label:Verified=MAX,user=non_uploader AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX,user=onap.required.gha","label:Verified=MAX,user=non_uploader","label:Verified=MAX,count>=2"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "09086b5a7ce9a7467b42c6a86374f22318aaa4cd",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}