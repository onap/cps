{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d462b1e1_a6e9f418",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 7965
      },
      "writtenOn": "2023-11-06T12:24:06Z",
      "side": 1,
      "message": "will create a new ticket to do it more correctly.",
      "revId": "4fb19b0a6b3b2a17ffb78ef51091ea87ca9bc2e3",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ca483b6_25209c3e",
        "filename": "cps-service/src/main/java/org/onap/cps/cache/HazelcastCacheConfig.java",
        "patchSetId": 2
      },
      "lineNbr": 66,
      "author": {
        "id": 7965
      },
      "writtenOn": "2023-11-06T10:31:02Z",
      "side": 1,
      "message": "This change would apply for every distributed object..\nDo we parameterize it and set the classloader only when it is required.\ni.e for ModuleReference cache ( where we see the issue ) and not set explicitly for others? Does that makes sense ?",
      "revId": "4fb19b0a6b3b2a17ffb78ef51091ea87ca9bc2e3",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec23f8af_526747ac",
        "filename": "cps-service/src/main/java/org/onap/cps/cache/HazelcastCacheConfig.java",
        "patchSetId": 2
      },
      "lineNbr": 66,
      "author": {
        "id": 6639
      },
      "writtenOn": "2023-11-06T12:24:09Z",
      "side": 1,
      "message": "please create Jira to address proper solution later (might depend outcome)",
      "parentUuid": "3ca483b6_25209c3e",
      "revId": "4fb19b0a6b3b2a17ffb78ef51091ea87ca9bc2e3",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "A maximum \u0027Code-Review\u0027 vote from a non-uploader is required for the \u0027Code-Review\u0027 label. A minimum vote is blocking."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "4fb19b0a6b3b2a17ffb78ef51091ea87ca9bc2e3",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "A maximum \u0027Verified\u0027 vote from \u0027ONAP Required GHA\u0027 and one other CI or committer that is a non-uploader is required for the \u0027Verified\u0027 label. A minimum vote is blocking."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX,user\u003donap.required.gha AND label:Verified\u003dMAX,count\u003e\u003d2 AND label:Verified\u003dMAX,user\u003dnon_uploader AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX,user=onap.required.gha AND label:Verified=MAX,count>=2 AND label:Verified=MAX,user=non_uploader AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX,user=onap.required.gha","label:Verified=MAX,user=non_uploader","label:Verified=MAX,count>=2"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "4fb19b0a6b3b2a17ffb78ef51091ea87ca9bc2e3",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}