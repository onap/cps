{
  "comments": [
    {
      "key": {
        "uuid": "dcdd75bf_90ee71fe",
        "filename": "cps-service/src/main/java/org/onap/cps/yang/YangTextSchemaSourceSetBuilder.java",
        "patchSetId": 2
      },
      "lineNbr": 54,
      "author": {
        "id": 6841
      },
      "writtenOn": "2021-02-11T13:56:12Z",
      "side": 1,
      "message": "YANG_RECOMMENDED_FILE_NAME",
      "range": {
        "startLine": 54,
        "startChar": 33,
        "endLine": 54,
        "endChar": 62
      },
      "revId": "27d2e970f07e154ddcd9bffe33a06686fa7176f8",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c721011_ba38dcff",
        "filename": "cps-service/src/main/java/org/onap/cps/yang/YangTextSchemaSourceSetBuilder.java",
        "patchSetId": 2
      },
      "lineNbr": 55,
      "author": {
        "id": 6862
      },
      "writtenOn": "2021-02-12T11:58:44Z",
      "side": 1,
      "message": "Some thoughts : This pattern currently handles the invalid @ in the name(and .yang). What about other naming patterns in the future. Even an extra @ again in the name. Also, if we just need to handle the @ why not just use String.split() and get rid of regex altogether.",
      "range": {
        "startLine": 55,
        "startChar": 25,
        "endLine": 55,
        "endChar": 68
      },
      "revId": "27d2e970f07e154ddcd9bffe33a06686fa7176f8",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "157d7122_75fe429e",
        "filename": "cps-service/src/main/java/org/onap/cps/yang/YangTextSchemaSourceSetBuilder.java",
        "patchSetId": 2
      },
      "lineNbr": 55,
      "author": {
        "id": 7362
      },
      "writtenOn": "2021-02-15T08:09:33Z",
      "side": 1,
      "message": "@ symbol is expected in the name. \nthe pattern handles the case described in https://tools.ietf.org/html/rfc6020#section-5.2\nusing split is what was caused the bug.",
      "parentUuid": "3c721011_ba38dcff",
      "range": {
        "startLine": 55,
        "startChar": 25,
        "endLine": 55,
        "endChar": 68
      },
      "revId": "27d2e970f07e154ddcd9bffe33a06686fa7176f8",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bf468d66_9446e50f",
        "filename": "cps-service/src/main/java/org/onap/cps/yang/YangTextSchemaSourceSetBuilder.java",
        "patchSetId": 2
      },
      "lineNbr": 167,
      "author": {
        "id": 6862
      },
      "writtenOn": "2021-02-11T12:27:33Z",
      "side": 1,
      "message": "does not imply that we check regex pattern as well",
      "range": {
        "startLine": 167,
        "startChar": 44,
        "endLine": 167,
        "endChar": 58
      },
      "revId": "27d2e970f07e154ddcd9bffe33a06686fa7176f8",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2042114c_3cdb5cd1",
        "filename": "cps-service/src/main/java/org/onap/cps/yang/YangTextSchemaSourceSetBuilder.java",
        "patchSetId": 2
      },
      "lineNbr": 167,
      "author": {
        "id": 6679
      },
      "writtenOn": "2021-02-11T12:58:20Z",
      "side": 1,
      "message": "I dont understand the comment, can you extend?",
      "parentUuid": "bf468d66_9446e50f",
      "range": {
        "startLine": 167,
        "startChar": 44,
        "endLine": 167,
        "endChar": 58
      },
      "revId": "27d2e970f07e154ddcd9bffe33a06686fa7176f8",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "02f16ad2_a454dec7",
        "filename": "cps-service/src/main/java/org/onap/cps/yang/YangTextSchemaSourceSetBuilder.java",
        "patchSetId": 2
      },
      "lineNbr": 167,
      "author": {
        "id": 6862
      },
      "writtenOn": "2021-02-11T13:41:15Z",
      "side": 1,
      "message": "somehow method name should say what method intends to do",
      "parentUuid": "2042114c_3cdb5cd1",
      "range": {
        "startLine": 167,
        "startChar": 44,
        "endLine": 167,
        "endChar": 58
      },
      "revId": "27d2e970f07e154ddcd9bffe33a06686fa7176f8",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1d4de15_11bb27ae",
        "filename": "cps-service/src/main/java/org/onap/cps/yang/YangTextSchemaSourceSetBuilder.java",
        "patchSetId": 2
      },
      "lineNbr": 167,
      "author": {
        "id": 6679
      },
      "writtenOn": "2021-02-11T13:46:17Z",
      "side": 1,
      "message": "I dont agree, if you will be doing some null check, will you want to add that as well on the name? \njavadoc could be added but I dont see extra value on that",
      "parentUuid": "02f16ad2_a454dec7",
      "range": {
        "startLine": 167,
        "startChar": 44,
        "endLine": 167,
        "endChar": 58
      },
      "revId": "27d2e970f07e154ddcd9bffe33a06686fa7176f8",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "72faec1c_d2487351",
        "filename": "cps-service/src/main/java/org/onap/cps/yang/YangTextSchemaSourceSetBuilder.java",
        "patchSetId": 2
      },
      "lineNbr": 167,
      "author": {
        "id": 6841
      },
      "writtenOn": "2021-02-11T13:56:12Z",
      "side": 1,
      "message": "maybe rename to createValidIdentifierFromResourceName",
      "parentUuid": "02f16ad2_a454dec7",
      "range": {
        "startLine": 167,
        "startChar": 44,
        "endLine": 167,
        "endChar": 58
      },
      "revId": "27d2e970f07e154ddcd9bffe33a06686fa7176f8",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a2cf3696_95e5632a",
        "filename": "cps-service/src/main/java/org/onap/cps/yang/YangTextSchemaSourceSetBuilder.java",
        "patchSetId": 2
      },
      "lineNbr": 167,
      "author": {
        "id": 6862
      },
      "writtenOn": "2021-02-11T13:58:14Z",
      "side": 1,
      "message": "null check can be avoided as that can be done in single line and is pretty basic functionality/validation, but this is whole method which uses regex and somehow method name gives no clue on it.",
      "parentUuid": "d1d4de15_11bb27ae",
      "range": {
        "startLine": 167,
        "startChar": 44,
        "endLine": 167,
        "endChar": 58
      },
      "revId": "27d2e970f07e154ddcd9bffe33a06686fa7176f8",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "66f5237f_27354c7e",
        "filename": "cps-service/src/main/java/org/onap/cps/yang/YangTextSchemaSourceSetBuilder.java",
        "patchSetId": 2
      },
      "lineNbr": 167,
      "author": {
        "id": 6862
      },
      "writtenOn": "2021-02-12T11:58:44Z",
      "side": 1,
      "message": "The name from @Niamh above sounds reasonable or even createValidIdentifierFromSourceName is fine. Atleast it mentions WHAT is being done.",
      "parentUuid": "a2cf3696_95e5632a",
      "range": {
        "startLine": 167,
        "startChar": 44,
        "endLine": 167,
        "endChar": 58
      },
      "revId": "27d2e970f07e154ddcd9bffe33a06686fa7176f8",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bdb4fe1c_57250af5",
        "filename": "cps-service/src/main/java/org/onap/cps/yang/YangTextSchemaSourceSetBuilder.java",
        "patchSetId": 2
      },
      "lineNbr": 167,
      "author": {
        "id": 6679
      },
      "writtenOn": "2021-02-15T07:56:27Z",
      "side": 1,
      "message": "There is 2 good practice of clean code to be followed here.\n- meaningful names\n- keep it short\n\ncreateValidIdentifierFromSourceName is too long and not adding extra value.\n\ncreateValid** Is implicit that we want to create something valid,  neither I expect we will have a method createInvalid.\ncreateValidIdentifier** WHAT we are creating is implicit by the return value. \ncreat**FromSourceName Also FROM WHAT we are creating it, is implicit by the passed parameters.\n\nSo here we could have two possible paths for naming\n   createIdentifier\n   fromSourceName\n\nYou can see examples of what I\u0027m trying to explain under Collectors java class, or ImmutableList class or many other methods within our project itself indeed.\n\nI like that we are trying use meaningful naming, but we need to avoid taking the path of using long methods name just because a misunderstanding of the good practice.\nIf one method name is too long, the reason would be that not better naming has been found OR because is doing too much, and needs to be reworked. At any rate is a code smell similar to have a really short with no meaning.\n\nI hope I explained what I\u0027m trying to point ðŸ˜Š",
      "parentUuid": "66f5237f_27354c7e",
      "range": {
        "startLine": 167,
        "startChar": 44,
        "endLine": 167,
        "endChar": 58
      },
      "revId": "27d2e970f07e154ddcd9bffe33a06686fa7176f8",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d5460d4f_b354c39e",
        "filename": "cps-service/src/test/groovy/org/onap/cps/utils/YangTextSchemaSourceSetSpec.groovy",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 6639
      },
      "writtenOn": "2021-02-11T13:08:10Z",
      "side": 1,
      "message": "as is good practice for a bug it would be nice to have a separate bug showcasing the changed behavior.\n(dont lump it in with existing test)\n\ndef \u0027Generating a YangTextSchemaSource from a file following the recommended naming\u0027\nor \ndef \u0027Generating a YangTextSchemaSource from a file with \u003c@Revision\u003e in the name\u0027",
      "range": {
        "startLine": 33,
        "startChar": 10,
        "endLine": 33,
        "endChar": 130
      },
      "revId": "27d2e970f07e154ddcd9bffe33a06686fa7176f8",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f5e9b512_6b9bef76",
        "filename": "cps-service/src/test/groovy/org/onap/cps/utils/YangTextSchemaSourceSetSpec.groovy",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 6679
      },
      "writtenOn": "2021-02-11T13:15:02Z",
      "side": 1,
      "message": "I agree that one test with table format like the next test will be more clear that those are 2 scenarios been tested",
      "parentUuid": "d5460d4f_b354c39e",
      "range": {
        "startLine": 33,
        "startChar": 10,
        "endLine": 33,
        "endChar": 130
      },
      "revId": "27d2e970f07e154ddcd9bffe33a06686fa7176f8",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ac29a329_b461b0fe",
        "filename": "cps-service/src/test/groovy/org/onap/cps/utils/YangTextSchemaSourceSetSpec.groovy",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 7362
      },
      "writtenOn": "2021-02-15T08:09:33Z",
      "side": 1,
      "message": "updated using unroll",
      "parentUuid": "f5e9b512_6b9bef76",
      "range": {
        "startLine": 33,
        "startChar": 10,
        "endLine": 33,
        "endChar": 130
      },
      "revId": "27d2e970f07e154ddcd9bffe33a06686fa7176f8",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    }
  ]
}