{
  "comments": [
    {
      "key": {
        "uuid": "c7f30d59_473e4ae8",
        "filename": "integration-test/src/test/groovy/org/onap/cps/integration/functional/CpsQueryServiceIntegrationSpec.groovy",
        "patchSetId": 17
      },
      "lineNbr": 88,
      "author": {
        "id": 6742
      },
      "writtenOn": "2023-05-03T09:07:37Z",
      "side": 1,
      "message": "Can you change this to just check book title? It will make test easier to read.\n        then: \u0027the result contains expected nodes\u0027\n            def bookTitles \u003d result.collect { it.getLeaves().get(\u0027title\u0027) }\n            assert bookTitles.sort() \u003d\u003d expectedBookTitles.sort()\n\nand for the test cases:\n scenario            | cpspath               || expectedBookTitles\n \u0027the \"\u003e\" condition\u0027 | \u0027//books[@price\u003e13]\u0027  || [\"The Gruffalo\", \"Annihilation\", \"The Light Fantastic\", \n                                                 \"A Book with No Language\", \"Debian GNU/Linux\"]",
      "range": {
        "startLine": 84,
        "startChar": 131,
        "endLine": 88,
        "endChar": 64
      },
      "revId": "ae4acbfba0fcbbad631a33bcba33ffa87c0f5eae",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "33254d1f_72634ce3",
        "filename": "integration-test/src/test/groovy/org/onap/cps/integration/functional/CpsQueryServiceIntegrationSpec.groovy",
        "patchSetId": 17
      },
      "lineNbr": 88,
      "author": {
        "id": 6742
      },
      "writtenOn": "2023-05-03T09:12:20Z",
      "side": 1,
      "message": "It would also be nice to see a test case that is expected to return nothing, e.g.\n\n scenario            | cpspath                || expectedBookTitles\n \u0027price \u003e 1000\u0027      | \u0027//books[@price\u003e1000]\u0027 || []\n\nIt would also be interesting to see if negative numbers are supported:\n \u0027negative numbers\u0027  | \u0027//books[@price\u003e-100]\u0027 || [\"The Gruffalo\", \"Annihilation\", ...]\n\n(this case could be done here or in CpsPathQuerySpec)",
      "parentUuid": "c7f30d59_473e4ae8",
      "range": {
        "startLine": 84,
        "startChar": 131,
        "endLine": 88,
        "endChar": 64
      },
      "revId": "ae4acbfba0fcbbad631a33bcba33ffa87c0f5eae",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ce2fa2a_f9b93473",
        "filename": "integration-test/src/test/groovy/org/onap/cps/integration/functional/CpsQueryServiceIntegrationSpec.groovy",
        "patchSetId": 17
      },
      "lineNbr": 88,
      "author": {
        "id": 7840
      },
      "writtenOn": "2023-05-03T11:14:52Z",
      "side": 1,
      "message": "done",
      "parentUuid": "33254d1f_72634ce3",
      "range": {
        "startLine": 84,
        "startChar": 131,
        "endLine": 88,
        "endChar": 64
      },
      "revId": "ae4acbfba0fcbbad631a33bcba33ffa87c0f5eae",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "42223d46_2f072805",
        "filename": "integration-test/src/test/groovy/org/onap/cps/integration/functional/CpsQueryServiceIntegrationSpec.groovy",
        "patchSetId": 17
      },
      "lineNbr": 88,
      "author": {
        "id": 6742
      },
      "writtenOn": "2023-05-03T13:28:02Z",
      "side": 1,
      "message": "Great, thanks!",
      "parentUuid": "3ce2fa2a_f9b93473",
      "range": {
        "startLine": 84,
        "startChar": 131,
        "endLine": 88,
        "endChar": 64
      },
      "revId": "ae4acbfba0fcbbad631a33bcba33ffa87c0f5eae",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8e967cc5_e4001942",
        "filename": "integration-test/src/test/groovy/org/onap/cps/integration/functional/CpsQueryServiceIntegrationSpec.groovy",
        "patchSetId": 17
      },
      "lineNbr": 111,
      "author": {
        "id": 6742
      },
      "writtenOn": "2023-05-02T11:05:52Z",
      "side": 1,
      "message": "Please add some tests using AND/OR e.g. //books[@price\u003e10 or @lang\u003d\"English\"]\nFrom what I see, boolean conditions don\u0027t work with comparison operator.",
      "revId": "ae4acbfba0fcbbad631a33bcba33ffa87c0f5eae",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6b4a57a6_ee3be7c9",
        "filename": "integration-test/src/test/groovy/org/onap/cps/integration/functional/CpsQueryServiceIntegrationSpec.groovy",
        "patchSetId": 17
      },
      "lineNbr": 111,
      "author": {
        "id": 7840
      },
      "writtenOn": "2023-05-02T14:46:21Z",
      "side": 1,
      "message": "For current changes Boolean condition is not working with comparison operators, Need to find/write proper query which supports both conditions.",
      "parentUuid": "8e967cc5_e4001942",
      "revId": "ae4acbfba0fcbbad631a33bcba33ffa87c0f5eae",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3109abff_a31b0006",
        "filename": "integration-test/src/test/groovy/org/onap/cps/integration/functional/CpsQueryServiceIntegrationSpec.groovy",
        "patchSetId": 17
      },
      "lineNbr": 111,
      "author": {
        "id": 6742
      },
      "writtenOn": "2023-05-03T09:07:37Z",
      "side": 1,
      "message": "Okay, as long as it is a documented limitation.",
      "parentUuid": "6b4a57a6_ee3be7c9",
      "revId": "ae4acbfba0fcbbad631a33bcba33ffa87c0f5eae",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3c5caa_cb5d3b3e",
        "filename": "integration-test/src/test/groovy/org/onap/cps/integration/functional/CpsQueryServiceIntegrationSpec.groovy",
        "patchSetId": 17
      },
      "lineNbr": 111,
      "author": {
        "id": 7840
      },
      "writtenOn": "2023-05-03T09:26:20Z",
      "side": 1,
      "message": "The problem is e.g. //books[@price\u003e10 or @lang\u003d\"English\"] if we want to query this\nNative Query : ((attributes  -\u003e\u003e\u0027price\u0027)\\:\\:int \u003e \u002710\u0027 and attributes @\u003e \u0027{\"lang\":\"English\"}\u0027) ; were postgress is not supporting this operation . So for now it will be as limitation.",
      "parentUuid": "3109abff_a31b0006",
      "revId": "ae4acbfba0fcbbad631a33bcba33ffa87c0f5eae",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    }
  ]
}