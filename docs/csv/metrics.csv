"Metric Name","Description"
"cps.ncmp.controller.get","Time taken to get resource data from datastore"
"cm_handle_search_invocation_total","Search for cm handles within CPS-E-05 interface"
"cm_handle_search_invocation_total","Search for cm handles within CPS-E-05 interface"
"cm_handle_search_invocation_total","Search for cm handle ids within CPS-NCMP-I-01 interface"
"cps.ncmp.inventory.controller.update","Time taken to handle registration request"
"cps_ncmp_inventory_cm_handles_by_state{state=ADVISED}","Current number of cm handles in advised state"
"cps_ncmp_inventory_cm_handles_by_state{state=READY}","Current number of cm handles in ready state"
"cps_ncmp_inventory_cm_handles_by_state{state=LOCKED}","Current number of cm handles in locked state"
"cps_ncmp_inventory_cm_handles_by_state{state=DELETING}","Current number of cm handles in deleting state"
"cps_ncmp_inventory_cm_handles_by_state{state=DELETED}","Number of cm handles that have been deleted since the application started"
"cps.ncmp.cmnotifications.consumeandforward","Time taken to forward CM AVC events"
"cps.ncmp.dmi.get","Time taken to fetch the resource data from operational data store for given cm handle "
"cps.ncmp.inventory.persistence.datanode.get","Time taken to get a data node (from ncmp dmi registry)"
"cps.ncmp.inventory.persistence.datanode.get","Time taken to get a data node (from ncmp dmi registry)"
"cps.ncmp.inventory.module.references.from.dmi","Time taken to get all module references for a cm handle from dmi"
"cps.ncmp.inventory.yang.resources.from.dmi","Time taken to get list of yang resources from dmi"
"cps.ncmp.cmhandle.state.update.batch","Time taken to update a batch of cm handle states"
"cps.rest.admin.controller.schemaset.create","Time taken to create schemaset from controller"
"cps.data.controller.datanode.query.v1","Time taken to query data nodes"
"cps.data.controller.datanode.query.v2","Time taken to query data nodes"
"cps.data.controller.datanode.query.across.anchors","Time taken to query data nodes across anchors"
"cps.data.controller.datanode.get.v1","Time taken to get data node"
"cps.data.controller.datanode.get.v2","Time taken to get data node"
"cps.data.controller.datanode.get.v3","Time taken to get data node"
"cps.delta.controller.get.delta","Time taken to get delta between anchors"
"cps.delta.controller.get.delta","Time taken to get delta between anchors"
"cps.module.persistence.schemaset.create","Time taken to store a schemaset (list of module references)"
"cps.module.persistence.schemaset.createFromNewAndExistingModules","Time taken to store a schemaset (from new and existing)"
"cps.data.persistence.service.datanode.query","Time taken to query data nodes"
"cps.data.persistence.service.datanode.query.anchors","Time taken to query data nodes across all anchors or list of anchors"
"cps.data.persistence.service.datanode.get","Time taken to get a data node"
"cps.data.persistence.service.datanode.batch.get","Time taken to get data nodes"
"cps.dataupdate.events.send","Time taken to send Data Update event"
"cps.module.service.schemaset.create","Time taken to create (and store) a schemaset"
"cps.data.service.datanode.query","Time taken to query data nodes"
"cps.data.service.datanode.query","Time taken to query data nodes with a limit on results"
"cps.data.service.datanode.root.save","Time taken to save a root data node"
"cps.data.service.datanode.child.save","Time taken to save a child data node"
"cps.data.service.list.element.save","Time taken to save list elements"
"cps.data.service.datanode.get","Time taken to get data nodes for an xpath"
"cps.data.service.datanode.batch.get","Time taken to get a batch of data nodes"
"cps.data.service.datanode.leaves.update","Time taken to update a batch of leaf data nodes"
"cps.data.service.datanode.leaves.descendants.leaves.update","Time taken to update data node leaves and existing descendants leaves"
"cps.data.service.datanode.descendants.update","Time taken to update a data node and descendants"
"cps.data.service.datanode.descendants.batch.update","Time taken to update a batch of data nodes and descendants"
"cps.data.service.list.update","Time taken to update a list"
"cps.data.service.list.batch.update","Time taken to update a batch of lists"
"cps.data.service.datanode.delete","Time taken to delete a datanode"
"cps.data.service.datanode.batch.delete","Time taken to delete a batch of datanodes"
"cps.data.service.datanode.delete.anchor","Time taken to delete all datanodes for an anchor"
"cps.data.service.datanode.delete.anchor.batch","Time taken to delete all datanodes for multiple anchors"
"cps.data.service.list.delete","Time taken to delete a list or list element"
"cps.delta.service.get.delta","Time taken to get delta between anchors"
"cps.delta.service.get.delta","Time taken to get delta between anchor and a payload"
"cps.utils.yangparser.nodedata.with.parent.parse","Time taken to parse node data with a parent"
"cps.utils.yangparser.nodedata.with.parent.with.yangResourceMap.parse","Time taken to parse node data with a parent"
"cps.yangtextschemasourceset.build","Time taken to build a yang text schema source set"
"cps.yang.schemasourceset.build","Time taken to build a ODL yang Model"
