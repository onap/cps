@Timed: value="cps.ncmp.inventory.controller.update", description="Time taken to handle registration request"
@CountCmHandleSearchExecution: methodName="searchCmHandleIds", interfaceName="CPS-NCMP-I-01"
@Timed: value="cps.ncmp.controller.get", description="Time taken to get resource data from datastore"
@CountCmHandleSearchExecution: methodName="searchCmHandles", interfaceName="CPS-E-05"
@CountCmHandleSearchExecution: methodName="searchCmHandleIds", interfaceName="CPS-E-05"
@CmHandleStateGaugeMetadata: value="advisedCmHandlesCount", description="This is a gauge counting cm handles in the state of advised."
@CmHandleStateGaugeMetadata: value="readyCmHandlesCount", description="This is a gauge counting cm handles in the state of ready."
@CmHandleStateGaugeMetadata: value="lockedCmHandlesCount", description="This is a gauge counting cm handles in the state of locked."
@CmHandleStateGaugeMetadata: value="deletingCmHandlesCount", description="This is a gauge counting cm handles in the state of deleting."
@CmHandleStateGaugeMetadata: value="deletedCmHandlesCount", description="This is a gauge counting cm handles in the state of deleted."
@Timed: value="cps.ncmp.inventory.persistence.datanode.get", description="Time taken to get a data node (from ncmp dmi registry)"
@Timed: value="cps.ncmp.inventory.persistence.datanode.get", description="Time taken to get a data node (from ncmp dmi registry)"
@Timed: value="cps.ncmp.inventory.module.references.from.dmi", description="Time taken to get all module references for a cm handle from dmi"
@Timed: value="cps.ncmp.inventory.yang.resources.from.dmi", description="Time taken to get list of yang resources from dmi"
@Timed: value="cps.ncmp.cmhandle.state.update.batch", description="Time taken to update a batch of cm handle states"
@Timed: value="cps.rest.admin.controller.schemaset.create", description="Time taken to create schemaset from controller"
@Timed: value="cps.data.controller.datanode.query.v1", description="Time taken to query data nodes"
@Timed: value="cps.data.controller.datanode.query.v2", description="Time taken to query data nodes"
@Timed: value="cps.data.controller.datanode.query.across.anchors", description="Time taken to query data nodes across anchors"
@Timed: value="cps.data.controller.datanode.get.v1", description="Time taken to get data node"
@Timed: value="cps.data.controller.datanode.get.v2", description="Time taken to get data node"
@Timed: value="cps.delta.controller.get.delta", description="Time taken to get delta between anchors"
@Timed: value="cps.delta.controller.get.delta", description="Time taken to get delta between anchors"
@Timed: value="cps.module.persistence.schemaset.create", description="Time taken to store a schemaset (list of module references)"
@Timed: value="cps.module.persistence.schemaset.createFromNewAndExistingModules", description="Time taken to store a schemaset (from new and existing)"
@Timed: value="cps.data.persistence.service.datanode.query", description="Time taken to query data nodes"
@Timed: value="cps.data.persistence.service.datanode.query.anchors", description="Time taken to query data nodes across all anchors or list of anchors"
@Timed: value="cps.data.persistence.service.datanode.get", description="Time taken to get a data node"
@Timed: value="cps.data.persistence.service.datanode.batch.get", description="Time taken to get data nodes"
@Timed: value="cps.dataupdate.events.publish", description="Time taken to send Data Update event"
@Timed: value="cps.module.service.schemaset.create", description="Time taken to create (and store) a schemaset"
@Timed: value="cps.data.service.datanode.query", description="Time taken to query data nodes"
@Timed: value="cps.data.service.datanode.query", description="Time taken to query data nodes with a limit on results"
@Timed: value="cps.data.service.datanode.root.save", description="Time taken to save a root data node"
@Timed: value="cps.data.service.datanode.child.save", description="Time taken to save a child data node"
@Timed: value="cps.data.service.list.element.save", description="Time taken to save list elements"
@Timed: value="cps.data.service.datanode.get", description="Time taken to get data nodes for an xpath"
@Timed: value="cps.data.service.datanode.batch.get", description="Time taken to get a batch of data nodes"
@Timed: value="cps.data.service.datanode.leaves.update", description="Time taken to update a batch of leaf data nodes"
@Timed: value="cps.data.service.datanode.leaves.descendants.leaves.update", description="Time taken to update data node leaves and existing descendants leaves"
@Timed: value="cps.data.service.datanode.descendants.update", description="Time taken to update a data node and descendants"
@Timed: value="cps.data.service.datanode.descendants.batch.update", description="Time taken to update a batch of data nodes and descendants"
@Timed: value="cps.data.service.list.update", description="Time taken to update a list"
@Timed: value="cps.data.service.list.batch.update", description="Time taken to update a batch of lists"
@Timed: value="cps.data.service.datanode.delete", description="Time taken to delete a datanode"
@Timed: value="cps.data.service.datanode.batch.delete", description="Time taken to delete a batch of datanodes"
@Timed: value="cps.data.service.datanode.delete.anchor", description="Time taken to delete all datanodes for an anchor"
@Timed: value="cps.data.service.datanode.delete.anchor.batch", description="Time taken to delete all datanodes for multiple anchors"
@Timed: value="cps.data.service.list.delete", description="Time taken to delete a list or list element"
@Timed: value="cps.delta.service.get.delta", description="Time taken to get delta between anchors"
@Timed: value="cps.delta.service.get.delta", description="Time taken to get delta between anchor and a payload"
@Timed: value="cps.utils.yangparser.nodedata.with.parent.parse", description="Time taken to parse node data with a parent"
@Timed: value="cps.utils.yangparser.nodedata.with.parent.with.yangResourceMap.parse", description="Time taken to parse node data with a parent"
@Timed: value="cps.yangtextschemasourceset.build", description="Time taken to build a yang text schema source set"
@Timed: value="cps.yang.schemasourceset.build", description="Time taken to build a ODL yang Model"
