{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ab462be0_87e20e7a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 6639
      },
      "writtenOn": "2023-10-24T15:10:37Z",
      "side": 1,
      "message": "As discussed I don\u0027t agree with limiting the trustlevel for the DMI to a separate enum with fewer values. Its just unneccesary work and I think the original idea was that even a DMI might have other levels eventually (ie. it was down for a small amount of time v. a long amount of time)\nsecondly using the same enum makes it easier to compare and decide with trustLevel overrules the other",
      "revId": "93bb7e4c0bc1a94c7e979faa5ff391f466135fdd",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "704751cf_389074d9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 8063
      },
      "writtenOn": "2023-10-24T16:32:47Z",
      "side": 1,
      "message": "We have had a internal meeting on this commit and decided to abandon it for the reasons given below:\n\n- dmiPluginTrustMap and cmHandleTrustMap should be comparable with the same enum value that is TrustLevel.\n- The return value should be the same as TrustLevel in DmiRestClient for querying the health uri of dmis. By this way, less code with less enum should have the same functionality.\n- Dmi plugin trust level should not be limited to UP or DOWN values since there may be more level of trust of dmi plugins in the future.",
      "revId": "93bb7e4c0bc1a94c7e979faa5ff391f466135fdd",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "A maximum \u0027Code-Review\u0027 vote from a non-uploader is required for the \u0027Code-Review\u0027 label. A minimum vote is blocking."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MIN"],"failingAtoms":["label:Code-Review=MAX,user=non_uploader"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "93bb7e4c0bc1a94c7e979faa5ff391f466135fdd",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "A maximum \u0027Verified\u0027 vote from \u0027ONAP Required GHA\u0027 and one other CI or committer that is a non-uploader is required for the \u0027Verified\u0027 label. A minimum vote is blocking."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX,user\u003donap.required.gha AND label:Verified\u003dMAX,count\u003e\u003d2 AND label:Verified\u003dMAX,user\u003dnon_uploader AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX,user=onap.required.gha AND label:Verified=MAX,count>=2 AND label:Verified=MAX,user=non_uploader AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX,user=onap.required.gha","label:Verified=MAX,user=non_uploader","label:Verified=MAX,count>=2"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "93bb7e4c0bc1a94c7e979faa5ff391f466135fdd",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}