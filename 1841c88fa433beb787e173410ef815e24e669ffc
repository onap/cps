{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b820e805_27c23504",
        "filename": "cps-ncmp-service/src/main/java/org/onap/cps/ncmp/impl/inventory/CmHandleQueryServiceImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 150,
      "author": {
        "id": 7965
      },
      "writtenOn": "2025-03-13T16:59:18Z",
      "side": 1,
      "message": "maybe I will suggest an alternate solution using EntryProcessor.\nI think it can be more performant in this case.\n\nWill ping u separately for the solution.",
      "range": {
        "startLine": 150,
        "startChar": 40,
        "endLine": 150,
        "endChar": 46
      },
      "revId": "1841c88fa433beb787e173410ef815e24e669ffc",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04d78c10_9e99a7c4",
        "filename": "cps-ncmp-service/src/main/java/org/onap/cps/ncmp/impl/inventory/CmHandleQueryServiceImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 150,
      "author": {
        "id": 6742
      },
      "writtenOn": "2025-03-13T17:11:39Z",
      "side": 1,
      "message": "Nope. getAll is extremely fast for reading. We tested this patch, it is 5x faster than before - it eliminates virtually all the overhead from Hazelcast.\n\nFYI EntryProcessor is recommended for *writing* entries. EntryProcessor: \"Usually you perform a loop of keys - executing IMap.get(key), *mutating the value and finally putting the entry back in the map* using IMap.put(key,value)\"\n\nSo let\u0027s not complicate an already working solution.",
      "parentUuid": "b820e805_27c23504",
      "range": {
        "startLine": 150,
        "startChar": 40,
        "endLine": 150,
        "endChar": 46
      },
      "revId": "1841c88fa433beb787e173410ef815e24e669ffc",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c121627e_5a7a08fd",
        "filename": "cps-ncmp-service/src/main/java/org/onap/cps/ncmp/impl/inventory/CmHandleQueryServiceImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 150,
      "author": {
        "id": 6639
      },
      "writtenOn": "2025-03-13T17:25:53Z",
      "side": 1,
      "message": "agreed: simple is good!",
      "parentUuid": "04d78c10_9e99a7c4",
      "range": {
        "startLine": 150,
        "startChar": 40,
        "endLine": 150,
        "endChar": 46
      },
      "revId": "1841c88fa433beb787e173410ef815e24e669ffc",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6216783f_a8f31e85",
        "filename": "cps-ncmp-service/src/main/java/org/onap/cps/ncmp/impl/inventory/CmHandleQueryServiceImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 150,
      "author": {
        "id": 7965
      },
      "writtenOn": "2025-03-13T17:29:33Z",
      "side": 1,
      "message": "amm.. i would right away agree on the simplicity. current code is simple.\nBut would need to see for myself abt the approach I am thinking.\nI am ok to get this thing merged on the basis of simplicity.",
      "parentUuid": "c121627e_5a7a08fd",
      "range": {
        "startLine": 150,
        "startChar": 40,
        "endLine": 150,
        "endChar": 46
      },
      "revId": "1841c88fa433beb787e173410ef815e24e669ffc",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "A maximum \u0027Code-Review\u0027 vote from a non-uploader is required for the \u0027Code-Review\u0027 label. A minimum vote is blocking."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "1841c88fa433beb787e173410ef815e24e669ffc",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "A maximum \u0027Verified\u0027 vote from \u0027ONAP Required GHA\u0027 and two other CI systems or another CI system and committer that is a non-uploader is required for the \u0027Verified\u0027 label. A minimum vote is blocking."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX,user\u003donap.required.gha AND label:Verified\u003dMAX,count\u003e\u003d3 AND label:Verified\u003dMAX,user\u003dnon_uploader AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX,user=onap.required.gha AND label:Verified=MAX,count>=3 AND label:Verified=MAX,user=non_uploader AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX,user=onap.required.gha","label:Verified=MAX,user=non_uploader","label:Verified=MAX,count>=3"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "1841c88fa433beb787e173410ef815e24e669ffc",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}