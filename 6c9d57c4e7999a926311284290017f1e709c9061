{
  "comments": [
    {
      "key": {
        "uuid": "7ea2ba63_df98aacb",
        "filename": "cps-rest/src/test/groovy/org/onap/cps/rest/controller/AdminRestControllerSpec.groovy",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 6639
      },
      "writtenOn": "2021-01-20T17:52:46Z",
      "side": 1,
      "message": "please check my comment on text file first.\nOverall I can see you are really taking too Spock tets and you have added some excellent tests! Just need to watch out now for duplication/overlap",
      "revId": "6c9d57c4e7999a926311284290017f1e709c9061",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "874532db_ef2ab71a",
        "filename": "cps-rest/src/test/groovy/org/onap/cps/rest/controller/AdminRestControllerSpec.groovy",
        "patchSetId": 9
      },
      "lineNbr": 114,
      "author": {
        "id": 6639
      },
      "writtenOn": "2021-01-20T17:52:46Z",
      "side": 1,
      "message": "Not sure if this level of parameter check is really needed (it might lead to extra maintenance costs)\nYou have detailed test for this in the next MultipartFileUtilSpec.groovy\nI think Spock wildcards are sufficient here...",
      "range": {
        "startLine": 110,
        "startChar": 0,
        "endLine": 114,
        "endChar": 46
      },
      "revId": "6c9d57c4e7999a926311284290017f1e709c9061",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "224d6246_787fc206",
        "filename": "cps-rest/src/test/groovy/org/onap/cps/rest/controller/AdminRestControllerSpec.groovy",
        "patchSetId": 9
      },
      "lineNbr": 114,
      "author": {
        "id": 7362
      },
      "writtenOn": "2021-01-21T08:30:10Z",
      "side": 1,
      "message": "this is a test of rest controller functionality:\nis it able to upload zip, extracts the needed information \nand pass it to service level. no change (no maintenance cost)\nis expected unless you update the content of a zip file.",
      "parentUuid": "874532db_ef2ab71a",
      "range": {
        "startLine": 110,
        "startChar": 0,
        "endLine": 114,
        "endChar": 46
      },
      "revId": "6c9d57c4e7999a926311284290017f1e709c9061",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f1a19b9f_2e28291d",
        "filename": "cps-rest/src/test/groovy/org/onap/cps/rest/controller/AdminRestControllerSpec.groovy",
        "patchSetId": 9
      },
      "lineNbr": 146,
      "author": {
        "id": 6639
      },
      "writtenOn": "2021-01-20T17:52:46Z",
      "side": 1,
      "message": "you already cover both case i the next groovy test, no need to reeat here",
      "range": {
        "startLine": 146,
        "startChar": 12,
        "endLine": 146,
        "endChar": 39
      },
      "revId": "6c9d57c4e7999a926311284290017f1e709c9061",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "96a53bf8_98cc01b0",
        "filename": "cps-rest/src/test/groovy/org/onap/cps/rest/controller/AdminRestControllerSpec.groovy",
        "patchSetId": 9
      },
      "lineNbr": 146,
      "author": {
        "id": 7362
      },
      "writtenOn": "2021-01-21T08:30:10Z",
      "side": 1,
      "message": "these tests are having same inputs but different outputs.\ncurrent one is a test of expected behavior for REST API.\nthe test is for the assurance the expected behavior remain\nsame for external caller even when internal implementation is updated.",
      "parentUuid": "f1a19b9f_2e28291d",
      "range": {
        "startLine": 146,
        "startChar": 12,
        "endLine": 146,
        "endChar": 39
      },
      "revId": "6c9d57c4e7999a926311284290017f1e709c9061",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "06446c41_d5f5c79a",
        "filename": "cps-rest/src/test/groovy/org/onap/cps/rest/controller/AdminRestControllerSpec.groovy",
        "patchSetId": 9
      },
      "lineNbr": 188,
      "author": {
        "id": 6639
      },
      "writtenOn": "2021-01-20T17:52:46Z",
      "side": 1,
      "message": "why do you need both of these, are the used in different tests? \n(I assume one for zip and the other for normal file uplaod?)",
      "range": {
        "startLine": 187,
        "startChar": 1,
        "endLine": 188,
        "endChar": 69
      },
      "revId": "6c9d57c4e7999a926311284290017f1e709c9061",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e75c4d45_b3d53482",
        "filename": "cps-rest/src/test/groovy/org/onap/cps/rest/controller/AdminRestControllerSpec.groovy",
        "patchSetId": 9
      },
      "lineNbr": 188,
      "author": {
        "id": 7362
      },
      "writtenOn": "2021-01-21T08:30:10Z",
      "side": 1,
      "message": "getInputStream() is used on processing zip archive\ngetBytes() is used when getting yang file content\nsame mock is used to cover IOException handling\nin different locations (methods)",
      "parentUuid": "06446c41_d5f5c79a",
      "range": {
        "startLine": 187,
        "startChar": 1,
        "endLine": 188,
        "endChar": 69
      },
      "revId": "6c9d57c4e7999a926311284290017f1e709c9061",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f211d6f2_ed6fff97",
        "filename": "cps-rest/src/test/groovy/org/onap/cps/rest/utils/MultipartFileUtilSpec.groovy",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 6639
      },
      "writtenOn": "2021-01-20T17:52:46Z",
      "side": 1,
      "message": "there seems to be a lot of overlap with the previous test class.\n In general follow the testing pyramid principle!\nThis class is really a traditional unit tets ie only test one class and you have cover all possible variations here which is the correct way and probably needed because of the possible combinations of files and files in a zip file.\n\nHoever that means you can reduce the test and/or level of assert in the previous test class which was more like an \u0027integration type test. Ie there you don\u0027t have to cover all the variations you cover here. If the integration test calls the same methods you have tested here and there is no different code path depending on the result you can reduce the number of test in the previous class. There is a long term maintenance cost associated with this and in big projects eventually tets runtime an be an become an issue too.\n\nTIP: I use run with code coverage to help me decide what test I need to add in the integration test. Rune a tets and check which path you cover/don\u0027t cover to decide exactly what needs to be added (or can be removed)\n\n(it is not the only factor sometimes additional tets are need to clearly describe behavior even if they do cover the same path...",
      "revId": "6c9d57c4e7999a926311284290017f1e709c9061",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1179f3fa_bba1c76d",
        "filename": "cps-rest/src/test/groovy/org/onap/cps/rest/utils/MultipartFileUtilSpec.groovy",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 7362
      },
      "writtenOn": "2021-01-21T08:30:10Z",
      "side": 1,
      "message": "i disagree, if we cover code written, not the cases.\nthen the only purpose of these tests is a pretty statistics on SonarQube chart.\n\nprovided tests are for different components and these components are having different requirements to fulfill,\nso these are tests of different functionality, despite these tests are looking similar.\n\nfor utility class i check if data is extracted the way i expect, and the expected exceptions are thrown\nfor rest controller i test the expected parameters are passed to service level, and the expected\nerror responses are returned\n\nanyway, if you see some tests being extra enough to block approval for merge, \nplease clarify which tests (asserts) should be removed",
      "parentUuid": "f211d6f2_ed6fff97",
      "revId": "6c9d57c4e7999a926311284290017f1e709c9061",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ca80ff08_2021e751",
        "filename": "cps-rest/src/test/groovy/org/onap/cps/rest/utils/MultipartFileUtilSpec.groovy",
        "patchSetId": 9
      },
      "lineNbr": 47,
      "author": {
        "id": 6639
      },
      "writtenOn": "2021-01-20T17:52:46Z",
      "side": 1,
      "message": "is this deliberate? Or did you mean not Yang...",
      "range": {
        "startLine": 47,
        "startChar": 61,
        "endLine": 47,
        "endChar": 62
      },
      "revId": "6c9d57c4e7999a926311284290017f1e709c9061",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c37a3a2_f6dc54a6",
        "filename": "cps-rest/src/test/groovy/org/onap/cps/rest/utils/MultipartFileUtilSpec.groovy",
        "patchSetId": 9
      },
      "lineNbr": 47,
      "author": {
        "id": 7362
      },
      "writtenOn": "2021-01-21T08:30:10Z",
      "side": 1,
      "message": "typo, fixed",
      "parentUuid": "ca80ff08_2021e751",
      "range": {
        "startLine": 47,
        "startChar": 61,
        "endLine": 47,
        "endChar": 62
      },
      "revId": "6c9d57c4e7999a926311284290017f1e709c9061",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    }
  ]
}